---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.astro';
import Footer from '../../components/Footer.astro';
---

<Layout title="Graphics Programming - Buyun Wang">
  <Navigation />
  <main class="pt-32 pb-24 px-8">
    <article class="max-w-4xl mx-auto">
      <div class="mb-12">
        <a href="/archive" class="text-sm text-gray-600 hover:text-gray-900 mb-4 inline-block">← Back to Archive</a>
        <h1 class="text-5xl font-bold mb-4">Graphics Programming with Three.js and WebGL</h1>
        <div class="flex gap-4 text-sm text-gray-600">
          <span>Three.js</span>
          <span>•</span>
          <span>WebGL</span>
          <span>•</span>
          <span>CPSC 314 Projects</span>
        </div>
      </div>

      <div class="prose prose-lg max-w-none">
        <img src="/images/graphics_cover.jpg" alt="Graphics Programming Cover" class="w-full rounded-lg mb-8" />

        <p class="lead text-xl">
          A series of graphics projects that utilizes the power of three.js Javascript 3D library.
        </p>

        <h2 class="text-2xl font-semibold mt-12 mb-4">Course Overview</h2>
        <p>
          The projects are completed during CPSC 314 in UBC. Template codes are provided by <a href="https://www.ugrad.cs.ubc.ca/~cs314/Vsep2015/" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">Mikhail Bessmeltsev</a>. This course provides an introduction into the basic components of computer graphics including the mathematics and physics for computer graphics, foundations of 3D rendering, image processing and rendering pipeline.
        </p>

        <hr class="my-12" />

        <h2 class="text-3xl font-bold mb-6">Project 1: Animated Armadillo</h2>
        <img src="/images/armadillo.jpg" alt="Animated Armadillo" class="w-full rounded-lg mb-4" />
        
        <p>
          The template provides a simple scene with a yellowish 3D display, working normally and displaying an armadillo, and a non-functioning red remote control. The variable remotePosition is changed using arrow keys and passed to the remote control shader (remote.vs.glsl) using uniform variables in response to keyboard input.
        </p>
        
        <p>
          The remote control's fragment shader (remote.fs.glsl) is modified so that it changes its color according to a uniform variable tvChannel. You are able to switch channels using your keyboard (keys 1-3) and see the remote react. The fragments that are within some distance of the remote changes color due to the modification to the character's shaders. The armadillo is distorted in different ways for different channels including deforming the vertices in the armadillo in a wave over time and exploding the model along face normals.
        </p>

        <div class="mt-6 mb-12">
          <a href="/graphics/a1/A1.html" target="_blank" class="inline-flex items-center gap-2 text-blue-600 hover:underline">
            See it in action here →
          </a>
        </div>

        <hr class="my-12" />

        <h2 class="text-3xl font-bold mb-6">Project 2: Ostrich with Transformation</h2>
        <img src="/images/ostrich.jpg" alt="Ostrich with Transformation" class="w-full rounded-lg mb-4" />
        
        <p>
          The template provides a torso (placed with respect to the world coordinate frame), a neck (placed with respect to the torso coordinate frame) and a head (placed with respect to the neck coordinate frame) of the ostrich leaving the legs to be completed.
        </p>
        
        <p>
          The legs I added consist of two parts, both of which are cylinders: a thigh (placed with respect to the torso coordinate frame) and a lower leg (placed with respect to the thigh coordinate frame). The thigh and lower leg coordinate frames are rotated so that they move like the ostrich is running. The lower leg not only moves with respect to the thigh, but also has an independent motion. The running animation is cyclical and continues to move back and forth. They are moving at a reasonable speed. A timer is used to keep animation speed consistent instead of animating the legs every frame. Five different poses for the static body coordinate frames are added. Pressing the number keys between 0 and 5 should each show a different pose.
        </p>

        <div class="mt-6 mb-12">
          <a href="/graphics/a2/A2.html" target="_blank" class="inline-flex items-center gap-2 text-blue-600 hover:underline">
            See it in action here →
          </a>
        </div>

        <hr class="my-12" />

        <h2 class="text-3xl font-bold mb-6">Project 3: Shading, Lighting and Textures</h2>
        <img src="/images/shading.jpg" alt="Shading and Lighting" class="w-full rounded-lg mb-4" />
        
        <p>
          This project demonstrates couple of common shading methods including Gouraud Shading, Phong Reflection and Phong Shading, Blinn-Phong Shading and some basic texturing. The lightColor, lightDirection and ambientColor variables are defined as well as material properties for the objects (defined in kSpecular, kDiffuse and kAmbient).
        </p>
        
        <p>
          Gouraud shading calculates the lighting of an object at each vertex (e.g. in the vertex shader). The standard graphics pipeline will then interpolate the color of the object between the vertices to get the individual fragment colors. The Phong reflection model is achieved by passing the lighting parameters (such as the triangle normal and vertex position) as varying variables to the fragment shader. Then calculate the lighting of the mesh at each fragment using the interpolated lighting parameters. This allows the shading model to better approximate curved surfaces and produces a very smooth shading model.
        </p>
        
        <p>
          Blinn-Phong Shading is achieved by computing the dot product between the halfway vector between light and viewing direction, and the surface normal. In the texturing part, UV coordinates are taken from the vertex buffer (three.js provides them for free on default objects such as the sphere in our assignment). UV coordinates are a 2D index into an image file whose RGB values can be used to help color the mesh.
        </p>

        <div class="mt-6 mb-12">
          <a href="/graphics/a3/A3.html" target="_blank" class="inline-flex items-center gap-2 text-blue-600 hover:underline">
            See it in action here →
          </a>
        </div>

        <hr class="my-12" />

        <h2 class="text-3xl font-bold mb-6">Project 4: Ray Tracing</h2>
        <img src="/images/raytracer.bmp" alt="Ray Tracing" class="w-full rounded-lg mb-4" />
        
        <p>
          The first step to implement ray tracing is the basic ray casting for all pixels in the image, using the camera location and the coordinates of each pixel. Then iteratively test all the object's intersection with the given ray and update the depth as the first intersection's depth. The functions of intersection tests and the functions of casting primary rays are implemented in regard to different geometries to test if a ray intersects the objects.
        </p>
        
        <p>
          Next step is local illumination. It's achieved by calculating the ambient, diffuse, and specular terms in order to determine the color at the point where the ray intersects the scene. Then to implement the shadow ray calculation and update the lighting computation accordingly, shadow ray is emitted from a point to compute direct illumination to determine which lights are contributing to the lighting at that point.
        </p>
        
        <p>
          Finally to implement the secondary ray recursion for reflection, the rayDepth recursion depth variable is used to stop the recursion process and update the lighting computation at each step to account for the secondary component.
        </p>

        <h2 class="text-2xl font-semibold mt-12 mb-4">Tools & Technologies</h2>
        <div class="flex flex-wrap gap-2 mt-4">
          <span class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md text-sm">JavaScript</span>
          <span class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md text-sm">GLSL</span>
          <span class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md text-sm">Three.js</span>
          <span class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md text-sm">WebGL</span>
          <span class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md text-sm">C++</span>
          <span class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md text-sm">Linear Algebra</span>
          <span class="px-3 py-1 bg-gray-100 text-gray-700 rounded-md text-sm">Computer Graphics</span>
        </div>

        <div class="mt-12 pt-8 border-t border-gray-200">
          <div class="flex gap-4">
            <a href="/graphics/a2/A2.html" target="_blank" class="inline-flex items-center gap-2 px-6 py-3 bg-gray-900 text-white rounded-lg font-medium hover:bg-gray-800 transition-colors">
              View Ostrich Demo
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
            </a>
            <a href="/graphics/a3/A3.html" target="_blank" class="inline-flex items-center gap-2 px-6 py-3 border border-gray-900 text-gray-900 rounded-lg font-medium hover:bg-gray-100 transition-colors">
              View Shading Demo
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </article>
  </main>
  <Footer />
</Layout>
